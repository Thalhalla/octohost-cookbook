server {
  listen 80;

  listen 443 ssl deferred;
  ssl_certificate /etc/nginx/ssl.crt;
  ssl_certificate_key /etc/nginx/ssl.key;

  # PFS from: https://community.qualys.com/blogs/securitylabs/2013/08/05/configuring-apache-nginx-and-openssl-for-forward-secrecy
  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
  ssl_prefer_server_ciphers on;
  ssl_ciphers "EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA RC4 !aNULL !eNULL !LOW !3DES !MD5 !EXP !PSK !SRP !DSS";

  # From https://github.com/igrigorik/istlsfastyet.com/blob/master/nginx.conf
  ssl_session_cache shared:SSL:10m;  # 10MB -> ~40,000 sessions.
  ssl_session_timeout 24h;           # 24 hours
  ssl_buffer_size 1400;              # 1400 bytes to fit in one MTU
  keepalive_timeout 300;             # up from 75 secs default

  location /get {
    internal;
    proxy_pass http://127.0.0.1:8080/get;
  }

  location / {
    # Send some additional headers over.
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    # Gzip proxied content.
    gzip on;
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_min_length 1100;
    gzip_buffers 16 8k;
    gzip_types text/plain text/css application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_vary on;
    set $upstream "";
    set $domain $host;
    rewrite_by_lua '
      local parser = require "redis.parser"
      local domain = ngx.var["domain"]
      local result = ngx.location.capture("/get", { args = { domain = domain }})

      local res, typ = parser.parse_reply(result.body)
      -- No endpoint data was found for that domain.
      if (res == nil) then
        ngx.exit(ngx.HTTP_NOT_FOUND)
      end
      if typ == parser.BAD_REPLY then
        -- res is the textual error message from the parser
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      elseif typ == parser.ERROR_REPLY then
        -- res is the error message from the redis2 server
        ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
      elseif typ == parser.BULK_REPLY then
        -- res is a string for the bulk data
        ngx.log(ngx.INFO, res)
        -- Endpoint data was found for that domain.
        -- Set the upstream variable to the endpoint data.
        ngx.var.upstream = res
      end
    ';
    proxy_pass http://$upstream;
  }
}
